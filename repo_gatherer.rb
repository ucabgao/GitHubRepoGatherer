#!/usr/bin/env ruby

require 'net/http'
require 'json'

KEYWORD_FILE = 'keywords.txt'
REPO_FILE = 'repos.txt'
URL_PREFIX= 'https://api.github.com/search/issues?'
SEARCH_TERMS = 'in:title,body+language:javascript+state:closed'
SEARCH_PARAMETERS = '&sort=created&order=asc&per_page=100'

TOKEN = '6a7d7061876d59a2cba795290155c0f6c16c8705' # Generated by GitHub, use your own
PASSWORD = 'x-oauth-basic' # Format set by GitHub

class RepoGatherer

  attr_accessor :total_counts, :keywords, :repos

  def initialize
    @keywords = []
    @repos = []
    File.readlines(KEYWORD_FILE).each do |line|
      @keywords.push(line.gsub(/\s/, '%20').chomp)
    end
    @total_counts = Hash.new
    @keywords.each { |keyword| @total_counts[keyword] = 0 }
  end

  def estimate_page_number
    build_urls.each do |key, value|
      uri = URI(value)

      Net::HTTP.start(uri.host, uri.port,
                      :use_ssl => uri.scheme == 'https') do |http|
        request = Net::HTTP::Get.new uri

        # Basic authentication for GitHub API
        request.basic_auth TOKEN, PASSWORD

        response = http.request request # Net::HTTPResponse object

        # Json parsing
        @total_counts[key] = JSON.parse(response.body)['total_count']
      end
    end

    @total_counts.each { |key, value| puts key + ': ' + value.to_s }
  end

  def build_urls()
    urls = Hash.new
    @keywords.each do |keyword|
      search_term = "q=#{keyword}+"
      search_url = URL_PREFIX + search_term + SEARCH_TERMS + SEARCH_PARAMETERS
      puts "[INFO] Initial Search URL: #{search_url}"
      urls[keyword] = search_url
    end
    urls
  end

  def gather
    build_urls.each do |key, value|

      uri = URI(value)

      Net::HTTP.start(uri.host, uri.port,
                      :use_ssl => uri.scheme == 'https') do |http|
        request = Net::HTTP::Get.new uri

        # Basic authentication for GitHub API
        request.basic_auth TOKEN, PASSWORD

        response = http.request request # Net::HTTPResponse object

        # Status
        puts response.code       # => '200'
        puts response.message    # => 'OK'
        puts response.class.name # => 'HTTPOK'

        issue_hash = JSON.parse(response.body)

        issue_hash['items'].each do |repo|
          repo_url = repo['url'].sub(/api/, 'www').sub(/\/repos/, '').sub(/\/issues.*/, '') + "\n"
          @repos.push(repo_url)
        end
      end
    end

    file = File.new(REPO_FILE, 'a')
    repos.uniq.each { |repo_url| file.write(repo_url) }
    file.close
  end
end

repo_gatherer = RepoGatherer.new
repo_gatherer.estimate_page_number
repo_gatherer.gather