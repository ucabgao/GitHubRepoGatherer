#!/usr/bin/env ruby

require 'net/http'
require 'json'

KEYWORD_FILE = 'keywords.txt'
REPO_FILE = 'repos.txt'
URL_PREFIX= 'https://api.github.com/search/issues?'
SEARCH_TERMS = 'in:title,body+language:javascript+state:closed'
SEARCH_PARAMETERS = '&sort=created&order=asc&per_page=100'

TOKEN = 'af931a5546d61bbe66123c7ec4facf6e778e4ccb' # Generated by GitHub, use your own
PASSWORD = 'x-oauth-basic' # Format set by GitHub

MAXIMUM_PAGE = 10 # GitHub API only provides 1000 results

class RepoGatherer

  attr_accessor :total_pages, :keywords, :repos

  def initialize
    @keywords = []
    @repos = []
    File.readlines(KEYWORD_FILE).each do |line|
      @keywords.push(line.chomp.gsub(/\s/, '%20'))
    end
    @total_pages = Hash.new
    @keywords.each { |keyword| @total_pages[keyword] = 1 }
  end

  def estimate_page_number
    @keywords.each do |keyword|
      uri = URI(build_url(keyword))
      puts build_url(keyword)
      Net::HTTP.start(uri.host, uri.port,
                      :use_ssl => uri.scheme == 'https') do |http|
        request = Net::HTTP::Get.new uri

        # Basic authentication for GitHub API
        request.basic_auth TOKEN, PASSWORD
        response = http.request request # Net::HTTPResponse object

        puts response.code       # => '200'
        puts response.message    # => 'OK'
        puts response.class.name # => 'HTTPOK'

        # Json parsing
        total_count = JSON.parse(response.body)['total_count']

        if total_count % 100 == 0
          @total_pages[keyword] = total_count/100
        else
          @total_pages[keyword] = total_count/100 + 1
        end
      end
    end

    @total_pages.each { |key, value| puts key + ': ' + value.to_s }
    sleep 20
  end

  # def build_urls()
  #   urls = Hash.new
  #   @keywords.each do |keyword|
  #     search_term = "q=#{keyword}+"
  #     search_url = URL_PREFIX + search_term + SEARCH_TERMS + SEARCH_PARAMETERS
  #     puts "[INFO] Initial Search URL: #{search_url}"
  #     urls[keyword] = search_url
  #   end
  #   urls
  # end

  def build_url(keyword, opts = {})
    page = opts[:page] || 1
    search_term = "q=#{keyword}+"
    search_url = URL_PREFIX + search_term + SEARCH_TERMS + SEARCH_PARAMETERS + "&page=#{page.to_s}"
  end

  def gather
    @keywords.each do |keyword|

      page_number = @total_pages[keyword] >= MAXIMUM_PAGE ? MAXIMUM_PAGE : @total_pages[keyword]

      (1..page_number).each do |page|
        uri = URI(build_url(keyword, :page => page))
        puts build_url(keyword, :page => page)
        Net::HTTP.start(uri.host, uri.port,
                        :use_ssl => uri.scheme == 'https') do |http|
          request = Net::HTTP::Get.new uri

          # Basic authentication for GitHub API
          request.basic_auth TOKEN, PASSWORD
          response = http.request request # Net::HTTPResponse object

          # Status
          puts response.code       # => '200'
          puts response.message    # => 'OK'
          puts response.class.name # => 'HTTPOK'

          issue_hash = JSON.parse(response.body)

          issue_hash['items'].each do |repo|
            repo_url = repo['url'].sub(/api/, 'www').sub(/\/repos/, '').sub(/\/issues.*/, '') + "\n"
            @repos.push(repo_url)
          end
        end
        sleep 5
      end
    end
      # build_url.each do |key, value|
      #
      #   uri = URI(value)
      #
      #   Net::HTTP.start(uri.host, uri.port,
      #                   :use_ssl => uri.scheme == 'https') do |http|
      #     request = Net::HTTP::Get.new uri
      #
      #     # Basic authentication for GitHub API
      #     request.basic_auth TOKEN, PASSWORD
      #
      #     response = http.request request # Net::HTTPResponse object
      #
      #     # Status
      #     puts response.code       # => '200'
      #     puts response.message    # => 'OK'
      #     puts response.class.name # => 'HTTPOK'
      #
      #     issue_hash = JSON.parse(response.body)
      #
      #     issue_hash['items'].each do |repo|
      #       repo_url = repo['url'].sub(/api/, 'www').sub(/\/repos/, '').sub(/\/issues.*/, '') + "\n"
      #       @repos.push(repo_url)
      #     end
      #   end
      # end

    file = File.new(REPO_FILE, 'a')
    repos.uniq.each { |repo_url| file.write(repo_url) }
    file.close
  end
end

repo_gatherer = RepoGatherer.new
repo_gatherer.estimate_page_number
repo_gatherer.gather